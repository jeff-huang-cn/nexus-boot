package ${packageName}.service.${businessName}.impl;

import cn.hutool.core.bean.BeanUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
#if($templateType != 2)
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.nexus.framework.common.result.PageResult;
#end
#if($templateType == 3)
import com.baomidou.dynamic.datasource.annotation.DSTransactional;
#end
import com.nexus.framework.web.exception.BusinessException;
import ${packageName}.controller.${businessName}.vo.*;
import ${packageName}.dal.dataobject.${businessName}.${className}DO;
#if($templateType == 3)
import ${packageName}.dal.dataobject.${businessName}.${subTable.className}DO;
import ${packageName}.dal.mapper.${businessName}.${subTable.className}Mapper;
#end
import ${packageName}.dal.mapper.${businessName}.${className}Mapper;
import ${packageName}.service.${businessName}.${className}Service;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.util.List;
#if($templateType == 3)
import java.util.Objects;
import java.util.Set;
#end
import java.util.stream.Collectors;

/**
 * ${classComment} Service 实现类
#if($templateType == 2)
 * （树表）
#elseif($templateType == 3)
 * （主子表）
#end
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ${className}ServiceImpl implements ${className}Service {

    private final ${className}Mapper ${classNameFirstLower}Mapper;
#if($templateType == 3)
    private final ${subTable.className}Mapper ${subTable.classNameFirstLower}Mapper;
#end

    @Override
#if($templateType == 3)
    @DSTransactional(rollbackFor = Exception.class)
#end
    public Long create(${className}SaveReqVO createReqVO) {
#if($templateType == 2)
        // 校验父节点和名称唯一性
        validateParentAndNameUnique(null, createReqVO.getParentId(), createReqVO.getName());
#end

        // 转换为 DO 并插入
        ${className}DO ${classNameFirstLower} = BeanUtil.copyProperties(createReqVO, ${className}DO.class);
        ${classNameFirstLower}Mapper.insert(${classNameFirstLower});

#if($templateType == 3)
        // 插入子表
        createSubList(${classNameFirstLower}.getId(), createReqVO.get${subTable.className}s());
#end

        return ${classNameFirstLower}.getId();
    }

    @Override
#if($templateType == 3)
    @DSTransactional(rollbackFor = Exception.class)
#end
    public void update(${className}SaveReqVO updateReqVO) {
        // 校验存在
        validateExists(updateReqVO.getId());

#if($templateType == 2)
        // 校验父节点和名称唯一性
        validateParentAndNameUnique(updateReqVO.getId(), updateReqVO.getParentId(), updateReqVO.getName());
#end

        // 更新主表
        ${className}DO update${className} = BeanUtil.copyProperties(updateReqVO, ${className}DO.class);
        ${classNameFirstLower}Mapper.updateById(update${className});

#if($templateType == 3)
        // 更新子表
        updateSubList(updateReqVO.getId(), updateReqVO.get${subTable.className}s());
#end
    }

    @Override
#if($templateType == 3)
    @DSTransactional(rollbackFor = Exception.class)
#end
    public void delete(Long id) {
        // 校验存在
        validateExists(id);

#if($templateType == 2)
        // 校验是否有子节点
        Long childCount = ${classNameFirstLower}Mapper.selectCount(
                new LambdaQueryWrapper<${className}DO>()
                        .eq(${className}DO::getParentId, id));
        if (childCount > 0) {
            throw new BusinessException(400, "存在子节点，无法删除");
        }
#end

        // 删除主表
        ${classNameFirstLower}Mapper.deleteById(id);

#if($templateType == 3)
        // 删除子表
        ${subTable.classNameFirstLower}Mapper.deleteBy${subJoinColumn.javaField.substring(0,1).toUpperCase()}${subJoinColumn.javaField.substring(1)}(id);
#end
    }
#if($templateType == 1 || $templateType == 3)

    @Override
#if($templateType == 3)
    @DSTransactional(rollbackFor = Exception.class)
#end
    public void deleteBatch(List<Long> ids) {
        // 批量删除主表
        ${classNameFirstLower}Mapper.deleteBatchIds(ids);

#if($templateType == 3)
        // 批量删除子表
        ids.forEach(id -> ${subTable.classNameFirstLower}Mapper.deleteBy${subJoinColumn.javaField.substring(0,1).toUpperCase()}${subJoinColumn.javaField.substring(1)}(id));
#end
    }
#end

    @Override
    public ${className}DO getById(Long id) {
        ${className}DO ${classNameFirstLower} = ${classNameFirstLower}Mapper.selectById(id);
        if (${classNameFirstLower} == null) {
            throw new BusinessException(404, "${classComment}不存在");
        }
        return ${classNameFirstLower};
    }
#if($templateType == 1 || $templateType == 3)

    @Override
    public PageResult<${className}RespVO> getPage(${className}PageReqVO pageReqVO) {
        // 构建查询条件
        LambdaQueryWrapper<${className}DO> wrapper = buildQueryWrapper(pageReqVO);

        // 分页查询
        IPage<${className}DO> page = new Page<>(pageReqVO.getPageNum(), pageReqVO.getPageSize());
        IPage<${className}DO> result = ${classNameFirstLower}Mapper.selectPage(page, wrapper);

        // 转换为 VO
        List<${className}RespVO> list = result.getRecords().stream()
                .map(item -> BeanUtil.copyProperties(item, ${className}RespVO.class))
                .collect(Collectors.toList());

        return new PageResult<>(list, result.getTotal());
    }

    @Override
    public List<${className}DO> getList(${className}PageReqVO pageReqVO) {
        // 构建查询条件
        LambdaQueryWrapper<${className}DO> wrapper = buildQueryWrapper(pageReqVO);

        // 查询列表
        return ${classNameFirstLower}Mapper.selectList(wrapper);
    }
#elseif($templateType == 2)

    @Override
    public List<${className}RespVO> getList(${className}ListReqVO listReqVO) {
        // 构建查询条件
        LambdaQueryWrapper<${className}DO> wrapper = buildQueryWrapper(listReqVO);

        // 查询列表
        List<${className}DO> list = ${classNameFirstLower}Mapper.selectList(wrapper);

        // 转换为 VO
        return list.stream()
                .map(item -> BeanUtil.copyProperties(item, ${className}RespVO.class))
                .collect(Collectors.toList());
    }
#end

    /**
     * 构建查询条件
     */
    private LambdaQueryWrapper<${className}DO> buildQueryWrapper(${className}#if($templateType == 2)List#else Page#endReqVO reqVO) {
        LambdaQueryWrapper<${className}DO> wrapper = new LambdaQueryWrapper<>();

#foreach($column in $columns)
#if(${column.listOperation})
#if(${column.listOperationCondition} == "LIKE")
        // ${column.columnComment} - 模糊查询
        if (StringUtils.hasText(reqVO.get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}())) {
            wrapper.like(${className}DO::get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}, reqVO.get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}());
        }
#elseif(${column.listOperationCondition} == "BETWEEN")
        // ${column.columnComment} - 范围查询
        if (reqVO.get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}Start() != null) {
            wrapper.ge(${className}DO::get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}, reqVO.get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}Start());
        }
        if (reqVO.get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}End() != null) {
            wrapper.le(${className}DO::get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}, reqVO.get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}End());
        }
#elseif(${column.listOperationCondition} == "EQ")
        // ${column.columnComment} - 精确匹配
        if (reqVO.get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}() != null) {
            wrapper.eq(${className}DO::get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}, reqVO.get${column.javaField.substring(0,1).toUpperCase()}${column.javaField.substring(1)}());
        }
#end
#end
#end

#if($templateType == 2)
        // 默认按排序号排序
        wrapper.orderByAsc(${className}DO::getSort);
#else
        // 默认按创建时间倒序
        wrapper.orderByDesc(${className}DO::getDateCreated);
#end

        return wrapper;
    }

    /**
     * 校验${classComment}是否存在
     */
    private void validateExists(Long id) {
        if (${classNameFirstLower}Mapper.selectById(id) == null) {
            throw new BusinessException(404, "${classComment}不存在");
        }
    }
#if($templateType == 2)

    /**
     * 校验父节点和名称唯一性
     */
    private void validateParentAndNameUnique(Long id, Long parentId, String name) {
        // 1. 校验父节点
        if (parentId != null && parentId != 0L) {
            ${className}DO parent = ${classNameFirstLower}Mapper.selectById(parentId);
            if (parent == null) {
                throw new BusinessException(400, "父节点不存在");
            }
        }

        // 2. 校验名称唯一性
        LambdaQueryWrapper<${className}DO> wrapper = new LambdaQueryWrapper<${className}DO>()
                .eq(${className}DO::getParentId, parentId)
                .eq(${className}DO::getName, name);
        if (id != null) {
            wrapper.ne(${className}DO::getId, id);
        }
        Long count = ${classNameFirstLower}Mapper.selectCount(wrapper);
        if (count > 0) {
            throw new BusinessException(400, "同级目录下已存在相同名称的${classComment}");
        }
    }
#end
#if($templateType == 3)

    // ==================== 子表（${subTable.classComment}） ====================

    @Override
    public List<${subTable.className}DO> get${subTable.className}ListBy${subJoinColumn.javaField.substring(0,1).toUpperCase()}${subJoinColumn.javaField.substring(1)}(Long ${subJoinColumn.javaField}) {
        return ${subTable.classNameFirstLower}Mapper.selectListBy${subJoinColumn.javaField.substring(0,1).toUpperCase()}${subJoinColumn.javaField.substring(1)}(${subJoinColumn.javaField});
    }

    /**
     * 创建子表列表
     */
    private void createSubList(Long ${subJoinColumn.javaField}, List<${subTable.className}SaveReqVO> list) {
        if (list == null || list.isEmpty()) {
            return;
        }
        list.forEach(item -> {
            ${subTable.className}DO subDO = BeanUtil.copyProperties(item, ${subTable.className}DO.class);
            subDO.set${subJoinColumn.javaField.substring(0,1).toUpperCase()}${subJoinColumn.javaField.substring(1)}(${subJoinColumn.javaField});
            ${subTable.classNameFirstLower}Mapper.insert(subDO);
        });
    }

    /**
     * 更新子表列表（完整差异对比，保留审计字段）
     */
    private void updateSubList(Long ${subJoinColumn.javaField}, List<${subTable.className}SaveReqVO> newList) {
        // 1. 查询旧数据
        List<${subTable.className}DO> oldList = ${subTable.classNameFirstLower}Mapper.selectListBy${subJoinColumn.javaField.substring(0,1).toUpperCase()}${subJoinColumn.javaField.substring(1)}(${subJoinColumn.javaField});

        // 2. 构建 ID 集合
        Set<Long> oldIds = oldList.stream().map(${subTable.className}DO::getId).collect(Collectors.toSet());
        Set<Long> newIds = newList.stream()
                .map(${subTable.className}SaveReqVO::getId)
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());

        // 3. 分类处理
        for (${subTable.className}SaveReqVO newItem : newList) {
            if (newItem.getId() == null || !oldIds.contains(newItem.getId())) {
                // 新增
                ${subTable.className}DO subDO = BeanUtil.copyProperties(newItem, ${subTable.className}DO.class);
                subDO.set${subJoinColumn.javaField.substring(0,1).toUpperCase()}${subJoinColumn.javaField.substring(1)}(${subJoinColumn.javaField});
                ${subTable.classNameFirstLower}Mapper.insert(subDO);
            } else {
                // 修改：保留审计字段
                ${subTable.className}DO subDO = BeanUtil.copyProperties(newItem, ${subTable.className}DO.class);
                subDO.set${subJoinColumn.javaField.substring(0,1).toUpperCase()}${subJoinColumn.javaField.substring(1)}(${subJoinColumn.javaField});
                ${subTable.classNameFirstLower}Mapper.updateById(subDO);
            }
        }

        // 4. 删除不存在的记录
        for (Long oldId : oldIds) {
            if (!newIds.contains(oldId)) {
                ${subTable.classNameFirstLower}Mapper.deleteById(oldId);
            }
        }
    }
#end
}

