package ${businessPackageName}.controller;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.result.common.admin.nexus.Result;
import com.result.common.admin.nexus.PageResult;
import ${businessPackageName}.entity.${className};
import ${businessPackageName}.service.${className}Service;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
import org.springframework.util.StringUtils;

import jakarta.validation.Valid;
import java.util.List;

/**
 * ${classComment} 控制器
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@RestController
@RequestMapping("/api/${businessName}")
@RequiredArgsConstructor
public class ${className}Controller {

    private final ${className}Service ${classNameFirstLower}Service;

    /**
     * 分页查询${classComment}列表
     */
    @GetMapping
    public Result<PageResult<${className}>> getList(
            @RequestParam(defaultValue = "1") Long current,
            @RequestParam(defaultValue = "10") Long size#foreach($column in $listColumns),
            @RequestParam(required = false) ${column.javaType} ${column.javaField}#end) {
        
        LambdaQueryWrapper<${className}> wrapper = new LambdaQueryWrapper<>();
#foreach($column in $listColumns)
#if($column.listOperationCondition == "LIKE")
        if (StringUtils.hasText(${column.javaField})) {
            wrapper.like(${className}::get#set($firstChar = $column.javaField.substring(0,1).toUpperCase())#set($restChars = $column.javaField.substring(1))${firstChar}${restChars}, ${column.javaField});
        }
#else
        if (${column.javaField} != null) {
            wrapper.eq(${className}::get#set($firstChar = $column.javaField.substring(0,1).toUpperCase())#set($restChars = $column.javaField.substring(1))${firstChar}${restChars}, ${column.javaField});
        }
#end
#end
        wrapper.orderByDesc(${className}::getCreateTime);
        
        IPage<${className}> page = new Page<>(current, size);
        IPage<${className}> result = ${classNameFirstLower}Service.page(page, wrapper);
        
        return Result.success(PageResult.of(
            result.getRecords(),
            result.getTotal(),
            result.getCurrent(),
            result.getSize()
        ));
    }

    /**
     * 根据ID查询${classComment}
     */
    @GetMapping("/{id}")
    public Result<${className}> getById(@PathVariable Long id) {
        ${className} entity = ${classNameFirstLower}Service.getById(id);
        return Result.success(entity);
    }

    /**
     * 新增${classComment}
     */
    @PostMapping
    public Result<Void> create(@Valid @RequestBody ${className} entity) {
        ${classNameFirstLower}Service.save(entity);
        return Result.success();
    }

    /**
     * 修改${classComment}
     */
    @PutMapping("/{id}")
    public Result<Void> update(@PathVariable Long id, @Valid @RequestBody ${className} entity) {
        entity.setId(id);
        ${classNameFirstLower}Service.updateById(entity);
        return Result.success();
    }

    /**
     * 删除${classComment}
     */
    @DeleteMapping("/{id}")
    public Result<Void> delete(@PathVariable Long id) {
        ${classNameFirstLower}Service.removeById(id);
        return Result.success();
    }

    /**
     * 批量删除${classComment}
     */
    @DeleteMapping
    public Result<Void> deleteBatch(@RequestBody List<Long> ids) {
        ${classNameFirstLower}Service.removeByIds(ids);
        return Result.success();
    }

}
