import React, { useState, useEffect } from 'react';
import { Table, Button, Space, Modal, message, Card, Form, Input, Row, Col } from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined, ReloadOutlined, SearchOutlined } from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import ${className}Form from './${className}Form';
import { ${classNameFirstLower}Api, type ${className}, type ${className}Query } from '@/services/${businessName}/${businessName}Api';

/**
 * ${classComment}管理（主子表）
 */
const ${className}List: React.FC = () => {
  const [list, setList] = useState<${className}[]>([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(false);
  const [pageNum, setPageNum] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [queryForm] = Form.useForm();
  const [modalVisible, setModalVisible] = useState(false);
  const [editId, setEditId] = useState<number | undefined>();

  // 加载数据
  const loadData = async (query?: ${className}Query) => {
    setLoading(true);
    try {
      const params: ${className}Query = {
        pageNum,
        pageSize,
        ...query,
      };
      const pageResult = await ${classNameFirstLower}Api.getPage(params);
      setList(pageResult.list);
      setTotal(pageResult.total);
    } catch (error) {
      // 错误消息已在 request.ts 中统一处理
    } finally {
      setLoading(false);
    }
  };

  // 搜索
  const handleSearch = () => {
    const values = queryForm.getFieldsValue();
    setPageNum(1); // 重置到第一页
    loadData(values);
  };

  // 重置
  const handleReset = () => {
    queryForm.resetFields();
    setPageNum(1);
    loadData();
  };

  // 删除
  const handleDelete = (id: number) => {
    Modal.confirm({
      title: '确认删除',
      content: '删除后不可恢复，确定要删除吗？',
      onOk: async () => {
        try {
          await ${classNameFirstLower}Api.delete(id);
          message.success('删除成功');
          loadData();
        } catch (error: any) {
          // 错误消息已在 request.ts 中统一处理
        }
      },
    });
  };

  // 批量删除
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);
  const handleBatchDelete = () => {
    if (selectedRowKeys.length === 0) {
      message.warning('请选择要删除的记录');
      return;
    }

    Modal.confirm({
      title: '确认批量删除',
      content: `确定要删除选中的 ${"$"}{selectedRowKeys.length} 条记录吗？`,
      onOk: async () => {
        try {
          await ${classNameFirstLower}Api.deleteBatch(selectedRowKeys as number[]);
          message.success('批量删除成功');
          setSelectedRowKeys([]);
          loadData();
        } catch (error: any) {
          // 错误消息已在 request.ts 中统一处理
        }
      },
    });
  };

  // 表格列定义
  const columns: ColumnsType<${className}> = [
#foreach($column in $columns)
#if(${column.listOperationResult})
    {
      title: '${column.columnComment}',
      dataIndex: '${column.javaField}',
      key: '${column.javaField}',
#if(${column.javaType} == "Integer" || ${column.javaType} == "Long")
      width: 100,
#elseif(${column.javaType} == "LocalDateTime")
      width: 180,
#else
      width: 150,
#end
    },
#end
#end
    {
      title: '操作',
      key: 'action',
      width: 150,
      fixed: 'right',
      render: (_: any, record: ${className}) => (
        <Space>
          <Button
            type="link"
            size="small"
            icon={<EditOutlined />}
            onClick={() => {
              setEditId(record.id);
              setModalVisible(true);
            }}
          >
            编辑
          </Button>
          <Button
            type="link"
            size="small"
            danger
            icon={<DeleteOutlined />}
            onClick={() => handleDelete(record.id!)}
          >
            删除
          </Button>
        </Space>
      ),
    },
  ];

  useEffect(() => {
    loadData();
  }, [pageNum, pageSize]);

  return (
    <Card title="${classComment}管理">
      {/* 查询表单 */}
      <Form form={queryForm} layout="inline" style={{ marginBottom: 16 }}>
        <Row gutter={[16, 16]} style={{ width: '100%' }}>
#foreach($column in $columns)
#if(${column.listOperation} && ${column.listOperationCondition} != "BETWEEN")
          <Col>
            <Form.Item name="${column.javaField}" label="${column.columnComment}">
              <Input placeholder="请输入${column.columnComment}" allowClear />
            </Form.Item>
          </Col>
#end
#end
          <Col>
            <Space>
              <Button type="primary" icon={<SearchOutlined />} onClick={handleSearch}>
                查询
              </Button>
              <Button onClick={handleReset}>重置</Button>
            </Space>
          </Col>
        </Row>
      </Form>

      {/* 操作按钮 */}
      <div style={{ marginBottom: 16 }}>
        <Space>
          <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={() => {
              setEditId(undefined);
              setModalVisible(true);
            }}
          >
            新增
          </Button>
          <Button danger icon={<DeleteOutlined />} onClick={handleBatchDelete}>
            批量删除
          </Button>
          <Button icon={<ReloadOutlined />} onClick={() => loadData()}>
            刷新
          </Button>
        </Space>
      </div>

      {/* 表格 */}
      <Table
        rowSelection={{
          selectedRowKeys,
          onChange: setSelectedRowKeys,
        }}
        columns={columns}
        dataSource={list}
        loading={loading}
        rowKey="id"
        pagination={{
          current: pageNum,
          pageSize: pageSize,
          total: total,
          showSizeChanger: true,
          showQuickJumper: true,
          showTotal: (total) => `共 ${"$"}{total} 条`,
          onChange: (page, size) => {
            setPageNum(page);
            setPageSize(size);
          },
        }}
        scroll={{ x: 'max-content' }}
      />

      <${className}Form
        visible={modalVisible}
        editId={editId}
        onClose={() => {
          setModalVisible(false);
          setEditId(undefined);
        }}
        onSuccess={() => {
          setModalVisible(false);
          setEditId(undefined);
          loadData();
        }}
      />
    </Card>
  );
};

export default ${className}List;
